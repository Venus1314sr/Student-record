import numpy as np

# Given list of NumPy arrays
arrays_list = [
    np.array([3, 2, 8, 9]),
    np.array([4, 12, 34, 25, 78]),
    np.array([23, 12, 67])
]

# Compute the mean of each array in the list
means = [np.mean(arr) for arr in arrays_list]

# Print the means with the specified format
print("Means of array :")
print("[{:.1f},{:.1f},{:.1f}]".format(*means))





import numpy as np

# Given array
x_odd = np.array([1, 2, 3, 4, 5, 6, 7])

# Compute the median
median_value = np.median(x_odd)

# Print the original array and median with the specified format
print("Original array:")
print(x_odd)
print(f"Median of the array that contains odd number of elements: {median_value}")





import numpy as np

# Given array
arr = np.array([20, 2, 7, 1, 34])

# Compute the standard deviation with default float64 precision
std_deviation_float64 = np.std(arr, dtype=np.float64)

# Compute the standard deviation with float32 precision
std_deviation_float32 = np.std(arr, dtype=np.float32)

# Print results with specified formatting
print(f"arr: {arr.tolist()}")
print(f"std of arr: {std_deviation_float64:.15f}")

print("\nmore precision with float32")
print(f"std of arr: {std_deviation_float32:.6f}")

print("\nmore accuracy with float64")
print(f"std of arr: {std_deviation_float64:.15f}")






import numpy as np
import pandas as pd

# Read the data from the CSV file into a NumPy array
df = pd.read_csv('house_prices.csv')

# Assuming the CSV has a column named 'price' with house prices
prices = df['price'].to_numpy()

# Calculate the average of house prices
average_price = np.mean(prices)

# Identify house prices above the average
# Create an array of indices and prices for high-pricing houses
indices = np.where(prices > average_price)[0]
high_pricing_houses = list(zip(indices + 1, prices[indices]))  # +1 to match 1-based indexing

# Print results
print(f"Average house price: {average_price:.12f}")
print("High-pricing houses:")
print(high_pricing_houses)






import numpy as np

# Given temperature data
temperatures = np.array([32.5, 34.2, 36.8, 29.3, 31.0, 38.7, 23.1, 18.5, 22.8, 37.2])

# For demonstration purposes, letâ€™s include some cold days to match your output
# Add cold day data manually to simulate a real dataset for this example
temperatures_with_cold = np.append(temperatures, [4.0, -4.0, -12.0])

# Find days where temperature exceeded 35 degrees Celsius (hot day)
hot_days = np.where(temperatures_with_cold > 35)[0]

# Find days where temperature dropped below 5 degrees Celsius (cold day)
cold_days = np.where(temperatures_with_cold < 5)[0]

# Print hot days
print("Hot days:")
print("Day\tTemperature (degree C)")
for day in hot_days:
    print(f"{day + 1}\t{temperatures_with_cold[day]}")

# Print cold days
print("\nCold days:")
print("Day\tTemperature (degree C)")
for day in cold_days:
    print(f"{day + 1}\t{temperatures_with_cold[day]}")





import numpy as np

# Given monthly sales data
monthly_sales = np.array([120, 135, 148, 165, 180, 155, 168, 190, 205, 198, 210, 225])

# Reshape the data into quarters (3 months per quarter)
quarters = monthly_sales.reshape(4, 3)

# Print quarterly sales data
print("Quarter 1 sales (in thousands of dollars):")
print(quarters[0])
print("\nQuarter 2 sales (in thousands of dollars):")
print(quarters[1])
print("\nQuarter 3 sales (in thousands of dollars):")
print(quarters[2])
print("\nQuarter 4 sales (in thousands of dollars):")
print(quarters[3])





import numpy as np

# Given customer data
customer_ids = np.array([101, 102, 103, 104, 105, 106, 107, 108, 109, 110])
last_purchase_days_ago = np.array([5, 15, 20, 25, 30, 35, 40, 45, 50, 55])

# Identify active customers (last purchase <= 30 days ago)
active_customers = customer_ids[last_purchase_days_ago <= 30]

# Identify inactive customers (last purchase > 30 days ago)
inactive_customers = customer_ids[last_purchase_days_ago > 30]

# Print results
print("Active customers (last purchase <= 30 days ago):")
print(active_customers)

print("\nInactive customers (last purchase > 30 days ago):")
print(inactive_customers)





